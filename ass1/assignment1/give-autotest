#!/bin/dash

# Include helper functions file
. ./helper_function

# Check if give directory exists
check_give "give-autotest"

# Check if the number of arguments is correct
check_args $# 2 "give-autotest"

## Check assignment parameter
assignment="$1"
# Check if assignment follow the correct format
check_assignment "$assignment" "give-autotest"

## Check filename parameter
filename="$2"
# Check if filename follow the correct format
check_file "$filename" "give-autotest"

# Check if assignment exists
check_assignment_found "$assignment" "give-autotest"

# Find the autotest file
autotest_file=""
for file_dir in ".give/$assignment"/*; do
    file=$(basename "$file_dir")
	if [ "$file" = "_AUTOTESTS" ]; then
        autotest_file="$file_dir"
    fi
done

# Check if solution file
for solution_files in ".give/$assignment/_SOLUTION"/*; do
    solution_file="$solution_files"
    break
done


passed=0
failed=0
while IFS= read -r line || [ -n "$line" ]; do
    is_pass=0
    if check_comment_and_empty "$line" "give-autotest"; then
        continue
    fi
    IFS='|' read -r label arguments stdin options << eof
    $line
eof

    stdin_file="stdin_file"
    echo "$stdin" > "$stdin_file"
    label=$(echo "$label" | sed 's/^ *//g')


    # shellcheck disable=SC2086
    expected_stdout=$(./"$solution_file" $arguments < "$stdin_file" 2>/dev/null; echo -n " ")
    # shellcheck disable=SC2086
    expected_stderr=$(./"$solution_file" $arguments < "$stdin_file" 2>&1 1>/dev/null; echo -n " ")

    # shellcheck disable=SC2086
    actual_stdout=$(./"$filename" $arguments < "$stdin_file" 2>/dev/null; echo -n " ")
    # shellcheck disable=SC2086
    actual_stderr=$(./"$filename" $arguments < "$stdin_file" 2>&1 1>/dev/null; echo -n " ")

    # shellcheck disable=SC2086
    ./"$solution_file" $arguments < "$stdin_file" > output.log 2>&1
    expected_exit=$?

    # shellcheck disable=SC2086
    ./"$filename" $arguments < "$stdin_file" > output.log 2>&1
    actual_exit=$?
    rm output.log

    actual_size=$(echo "$actual_stdout" | wc -c | cut -d' ' -f1,1)
    actual_size=$((actual_size-2))
    expected_size=$(echo "$expected_stdout" | wc -c | cut -d' ' -f1,1)
    expected_size=$((expected_size-2))

    actual_size_err=$(echo "$actual_stderr" | wc -c | cut -d' ' -f1,1)
    actual_size_err=$((actual_size_err-2))
    expected_size_err=$(echo "$expected_stderr" | wc -c | cut -d' ' -f1,1)
    expected_size_err=$((expected_size_err-2))

    line_expected=$(echo "$expected_stdout" | wc -l)
    extra_newline=$((line_expected+1))
    missing_newline=$((line_expected-1))
    line_actual=$(echo "$actual_stdout" | wc -l)

    line_expected_err=$(echo "$expected_stderr" | wc -l)
    extra_newline_err=$((line_expected_err+1))
    missing_newline_err=$((line_expected_err-1))
    line_actual_err=$(echo "$actual_stderr" | wc -l)

    # Check if options are present
    if echo "$options" | grep -qE 'c'; then
        actual_stdout=$(echo "$actual_stdout" | sed 's/.*/\L&/')
        expected_stdout=$(echo "$expected_stdout" | sed 's/.*/\L&/')
    fi

    if echo "$options" | grep -qE 'w'; then
        actual_stdout=$(echo "$actual_stdout" | sed 's/[ \t]//g')
        expected_stdout=$(echo "$expected_stdout" | sed 's/[ \t]//g')
    fi

    if echo "$options" | grep -qE 'b'; then
        actual_stdout=$(echo "$actual_stdout" | sed '/^$/d')
        expected_stdout=$(echo "$expected_stdout" | sed '/^$/d')
    fi

    if echo "$options" | grep -qE 'd'; then
        actual_stdout=$(echo "$actual_stdout" | sed 's/[^0-9\n]//g')
        expected_stdout=$(echo "$expected_stdout" | sed 's/[^0-9\n]//g')
    fi


    if ! [ "$actual_stdout" = "$expected_stdout" ]; then
        echo "* Test $label failed."
        is_pass=1
        failed=$((failed+1))
        if [ "$expected_stdout" = " " ] ; then
            # If expected stdout is empty
            echo "--- No stdout expected, these $actual_size bytes produced:"
            actual_stdout="${actual_stdout%?}"
            echo "$actual_stdout"
        elif [ "$actual_stdout" = " " ]; then
            # If actual stdout is empty
            echo "--- No stdout produced, these $expected_size bytes expected:"
            expected_stdout="${expected_stdout%?}"
            echo "$expected_stdout"
        elif [ "$line_actual" = "$extra_newline" ]; then
            # If extra newline at the end of actual stdout
            echo "Extra newline at end of stdout"
        elif [ "$line_actual" = "$missing_newline" ]; then
            # If missing newline at the end of actual stdout
            echo "Missing newline at end of stdout"
        else
            # If actual stdout is incorrect
            echo "--- Incorrect stdout of $actual_size bytes:"
            actual_stdout="${actual_stdout%?}"
            echo "$actual_stdout"
            echo "--- Correct stdout is these $expected_size bytes:"
            expected_stdout="${expected_stdout%?}"
            echo "$expected_stdout"
        fi
    fi

    if ! [ "$expected_stderr" = "$actual_stderr" ]; then
        if [ "$is_pass" = 0 ]; then
            echo "* Test $label failed."
            failed=$((failed+1))
        fi
        is_pass=1
        if [ "$expected_stderr" = " " ] ; then
            # If expected stderr is empty
            echo "--- No stderr expected, these $actual_size_err bytes produced:"
            actual_stderr="${actual_stderr%?}"
            echo "$actual_stderr"
        elif [ "$actual_stderr" = " " ]; then
            # If actual stderr is empty
            echo "--- No stderr produced, these $expected_size_err bytes expected:"
            expected_stderr="${expected_stderr%?}"
            echo "$expected_stderr"
        elif [ "$line_actual_err" = "$extra_newline_err" ]; then
            # If extra newline at the end of actual stderr
            echo "Extra newline at end of stderr"
        elif [ "$line_actual_err" = "$missing_newline_err" ]; then
            # If missing newline at the end of actual stderr
            echo "Missing newline at end of stderr"
        else
            # If actual stderr is incorrect
            echo "--- Incorrect stderr of $actual_size_err bytes:"
            actual_stderr="${actual_stderr%?}"
            echo "$actual_stderr"
            echo "--- Correct stderr is these $expected_size_err bytes:"
            expected_stderr="${expected_stderr%?}"
            echo "$expected_stderr"
        fi
    fi

    if [ "$is_pass" = 0 ]; then
        echo "* Test $label passed."
        passed=$((passed+1))
    fi

    if ! [ "$expected_exit" = "$actual_exit"  ]; then
        echo "Exit status of $actual_exit incorrect should be $expected_exit"
    fi
done < "$autotest_file"

echo "** $passed tests passed, $failed tests failed"